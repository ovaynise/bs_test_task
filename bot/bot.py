from datetime import datetime

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

from config import LOG_PATCH
from core.core import extract_datetime
from core.logger import OvayLogger
from database.db import Database

logger = OvayLogger(
    name='bot_logger', log_file_path=LOG_PATCH
).get_logger()


class TaskBot:
    def __init__(self, application: Application, database: Database):
        self.database = database
        self.application = application

    async def start(self, update: Update,
                    context: ContextTypes.DEFAULT_TYPE) -> None:
        logger.debug(f'–ó–∞–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start')
        user = update.effective_user
        await update.message.reply_text(
            f'–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã /add, /list,'
            f' /complete, /delete –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.'
        )

    def validate_add_command(self, args):
        if len(args) < 1:
            return False, ('–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /add'
                           ' –û–ø–∏—Å–∞–Ω–∏–µ DD-MM-YYYY-HH-MM')
        return True, None

    def validate_date(self, input_text):
        date_str = extract_datetime(input_text)
        if not date_str:
            return False, ('üüß–î–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç:'
                           ' "—Ç–µ–∫—Å—Ç DD-MM-YYYY-HH-MM"')
        return True, date_str

    async def add_task(self, update: Update,
                       context: ContextTypes.DEFAULT_TYPE) -> None:
        logger.debug(f'–ó–∞–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /add —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {context.args}')
        try:
            valid, message = self.validate_add_command(context.args)
            if not valid:
                await update.message.reply_text(message)
                return

            input_text = ' '.join(context.args)
            valid, date_str_or_message = self.validate_date(input_text)
            if not valid:
                await update.message.reply_text(date_str_or_message)
                return

            description = input_text.replace(date_str_or_message,
                                             '').strip()
            deadline = datetime.strptime(date_str_or_message,
                                         '%d-%m-%Y-%H-%M')

            logger.info(f'–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {description},'
                        f' —Å—Ä–æ–∫: {deadline}')
            task = self.database.add_task(description, deadline,
                                          update.effective_user.id)

            if task:
                logger.info(f'üü©–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {task}')
                await update.message.reply_text(
                    f'üü©–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:\n–û–ø–∏—Å–∞–Ω–∏–µ: {task.description}\n'
                    f'–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:'
                    f' {task.deadline.strftime("%d-%m-%Y %H:%M")}'
                )
            else:
                logger.error('üü•–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É.')
                await update.message.reply_text('üü•–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ '
                                                '–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.')

        except Exception as e:
            logger.error(f'üü•–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}')
            await update.message.reply_text('üü•–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ '
                                            '–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.')

    def validate_task_id(self, args):
        try:
            task_id = int(args[0])
            return True, task_id
        except (IndexError, ValueError):
            return False, '–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /complete task_id'

    async def complete_task(self, update: Update,
                            context: ContextTypes.DEFAULT_TYPE) -> None:
        logger.debug(f'–ó–∞–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /complete')
        valid, result = self.validate_task_id(context.args)
        if not valid:
            await update.message.reply_text(result)
            return

        task_description = self.database.complete_task(result)
        if task_description:
            await update.message.reply_text(
                f'–ó–∞–¥–∞—á–∞ "{task_description}" –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.')
        else:
            await update.message.reply_text('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')

    async def delete_task(self, update: Update,
                          context: ContextTypes.DEFAULT_TYPE) -> None:
        logger.debug(f'–ó–∞–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /delete')
        valid, result = self.validate_task_id(context.args)
        if not valid:
            await update.message.reply_text(result)
            return

        task = self.database.delete_task(result)
        if task:
            await update.message.reply_text(f'üü©–ó–∞–¥–∞—á–∞ "{task.description}"'
                                            f' —É–¥–∞–ª–µ–Ω–∞.')
        else:
            await update.message.reply_text('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')

    async def list_tasks(self, update: Update,
                         context: ContextTypes.DEFAULT_TYPE) -> None:
        logger.debug(f'–ó–∞–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /list')
        user_id = update.effective_user.id
        tasks = self.database.get_tasks(user_id)
        if tasks:
            message = '–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n' + '\n'.join([
                f'{task.id}. {task.description} - '
                f'{task.deadline.strftime("%d-%m-%Y %H:%M")}'
                for task in tasks
            ])
        else:
            message = '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.'
        await update.message.reply_text(message)

    def run(self):
        self.application.add_handler(
            CommandHandler('start', self.start))
        self.application.add_handler(
            CommandHandler('add', self.add_task))
        self.application.add_handler(
            CommandHandler('list', self.list_tasks))
        self.application.add_handler(
            CommandHandler('complete', self.complete_task))
        self.application.add_handler(
            CommandHandler('delete', self.delete_task))
        logger.info('–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è')
        print('–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è')
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)
