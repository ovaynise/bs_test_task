from datetime import datetime

from sqlalchemy import create_engine, exc, inspect
from sqlalchemy.orm import sessionmaker

from config import LOG_PATCH
from core.logger import OvayLogger
from database.models import Base, Task

logger = OvayLogger(
    name="bd_logger", log_file_path=LOG_PATCH
).get_logger()


class Database:
    def __init__(self, database_url):
        self.database_url = database_url
        self.engine = create_engine(database_url)
        self.Session = sessionmaker(bind=self.engine)
        self.init_db()

    def init_db(self):
        try:
            logger.debug('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...')
            inspector = inspect(self.engine)
            logger.debug('–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...')
            existing_tables = inspector.get_table_names()
            logger.debug(f'–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {existing_tables}')
            if not existing_tables:
                logger.info('üüß–¢–∞–±–ª–∏—Ü—ã –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º '
                            '—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...')
                try:
                    Base.metadata.create_all(self.engine)
                    logger.info('üü©–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
                except exc.SQLAlchemyError as e:
                    logger.error(f'üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}')
            else:
                logger.debug('üü©–¢–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.')
        except exc.SQLAlchemyError as e:
            logger.error(f'üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}')
        except Exception as e:
            logger.error(f'üõë–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}')

    def _get_session(self):
        session = self.Session()
        logger.debug('üü¶–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...')
        return session

    def close_session(self, session):
        session.close()
        logger.debug('üü¶–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.')

    def validate_description(self, description: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏."""
        if not isinstance(description, str) or not description:
            logger.error("üõë–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ë–î: "
                         f"–æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π.\n "
                         f"–ü–µ—Ä–µ–¥–∞–Ω–æ {description}"
                         f" c —Ç–∏–ø–æ–º –¥–∞–Ω–Ω—ã—Ö {type(description)}")
            return False
        return True

    def validate_deadline(self, deadline) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
        if not isinstance(deadline, (str, datetime)):
            logger.error("üõë–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ë–î:"
                         "  —Å—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"
                         f" –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º datetime.\n –ü–µ—Ä–µ–¥–∞–Ω–æ {datetime}"
                         f" c —Ç–∏–ø–æ–º –¥–∞–Ω–Ω—ã—Ö {type(datetime)}")
            return False
        return True

    def validate_user_id(self, user_id: int) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è user_id."""
        if not isinstance(user_id, int) or user_id < 1:
            logger.error("üõë–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ë–î: "
                         " user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "
                         f"—Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –∏ –±–æ–ª—å—à–µ 0.\n –ü–µ—Ä–µ–¥–∞–Ω–æ {user_id}"
                         f" c —Ç–∏–ø–æ–º –¥–∞–Ω–Ω—ã—Ö {type(user_id)}")
            return False
        return True

    def validate_task_id(self, task_id: int) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è task_id."""
        if not isinstance(task_id, int) or task_id < 1:
            logger.error("üõë–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ë–î: "
                         " task_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "
                         "—Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –∏ –±–æ–ª—å—à–µ 0..\n –ü–µ—Ä–µ–¥–∞–Ω–æ {task_id}"
                         f" c —Ç–∏–ø–æ–º –¥–∞–Ω–Ω—ã—Ö {type(task_id)}")
            return False
        return True

    def add_task(self, description, deadline, user_id):
        if not (self.validate_description(description) and
                self.validate_deadline(deadline) and
                self.validate_user_id(user_id)):
            return None

        with self._get_session() as session:
            try:
                task = Task(description=description,
                            deadline=deadline,
                            user_id=user_id)
                session.add(task)
                session.commit()
                session.refresh(task)
                logger.info(f'üü©–ó–∞–¥–∞—á–∞ {task} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.')
                return task
            except Exception as e:
                logger.error(f"üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑—É "
                             f"–¥–∞–Ω–Ω—ã—Ö: {e}")
                session.rollback()
                return None
            finally:
                self.close_session(session)

    def complete_task(self, task_id):
        if not self.validate_task_id(task_id):
            return None

        with self._get_session() as session:
            try:
                task = session.query(Task).filter_by(id=task_id).first()
                if task:
                    task.is_completed = True
                    session.commit()
                    logger.info(f'üü©–ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
                    return task.description
                return None
            except Exception as e:
                logger.error(f"üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
                session.rollback()
                return None
            finally:
                self.close_session(session)

    def delete_task(self, task_id):
        if not self.validate_task_id(task_id):
            return None

        with self._get_session() as session:
            try:
                task = session.query(Task).filter_by(id=task_id).first()
                if task:
                    session.delete(task)
                    session.commit()
                    logger.info(f"üü©–ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
                    return task
                else:
                    logger.warning(
                        f"üüß–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É {task_id}, –Ω–æ"
                        f" –æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î.")
                    return None
            except Exception as e:
                logger.error(f"üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
                session.rollback()
                return None
            finally:
                self.close_session(session)

    def get_tasks(self, user_id):
        if not self.validate_user_id(user_id):
            return None

        with self._get_session() as session:
            try:
                user_exists = session.query(Task).filter_by(
                    user_id=user_id).first()
                if not user_exists:
                    logger.warning(
                        f"üüß–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return None
                tasks = session.query(Task).filter_by(user_id=user_id,
                                                      is_completed=False).all()
                if tasks:
                    logger.info(
                        f'–ü–æ–ª—É—á–µ–Ω—ã –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {tasks}.')
                else:
                    logger.warning(
                        f"üüß–ó–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return tasks
            except Exception as e:
                logger.error(
                    f"üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                    f"{user_id}: {e}")
                return None
            finally:
                self.close_session(session)

    def get_all_not_completed_tasks(self):
        with self._get_session() as session:
            try:
                tasks = session.query(Task).filter_by(is_completed=False).all()
                logger.info(f'–ü–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {tasks}.')
                return tasks
            except Exception as e:
                logger.error(f"üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á: {e}")
                return None
            finally:
                self.close_session(session)

    def get_all_user_ids(self):
        with self._get_session() as session:
            try:
                user_ids = session.query(Task.user_id).distinct().all()
                logger.info(f'–ü–æ–ª—É—á–µ–Ω—ã –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ user_id: {user_ids}.')
                return [user_id[0] for user_id in
                        user_ids]  # –ò–∑–≤–ª–µ–∫–∞–µ–º id –∏–∑ –∫–æ—Ä—Ç–µ–∂–µ–π
            except Exception as e:
                logger.error(f"üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö user_id: {e}")
                return None
